{"version":3,"sources":["./src/app/nav-bar/nav-bar.component.ts","./src/app/time-change.pipe.ts","./src/environments/environment.ts","./src/app/data/ghosts.data.ts","./src/app/data/maps.data.ts","./src/app/no-evidence-ghost-tester/no-evidence-ghost-tester.component.ts","./src/app/no-evidence-ghost-tester/no-evidence-ghost-tester.component.html","./src/app/stopwatch/stopwatch.component.ts","./src/app/stopwatch/stopwatch.component.html","./src/app/app.component.ts","./src/app/app.component.html","./src/app/data/difficulties.data.ts","./src/app/app.module.ts","./src/app/footer.component.ts","./src/app/data/tests.data.ts","./src/app/sanity-tester/sanity.service.ts","./src/app/sanity-tester/sanity-tester.component.ts","./src/app/sanity-tester/sanity-tester.component.html","./src/app/app-routing.module.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-nav-bar',\r\n  template: `\r\n    <nav class=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n      <div class=\"container-fluid\">\r\n        <a class=\"navbar-brand\" href=\"#\">Phasma No-Evidence</a>\r\n      </div>\r\n    </nav>\r\n  `,\r\n  styles: [``],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class NavBarComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({ name: 'msToSec' })\r\nexport class TimeChangePipe implements PipeTransform {\r\n  transform(value: number): string {\r\n    return (Math.floor(value / 100) / 10).toFixed(1);\r\n  }\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","export const GHOSTS = [\r\n  // Non-Freezing\r\n  {\r\n    name: 'Poltergeist',\r\n    description:\r\n      `A Poltergeist's ability to manipulate objects, specifically doors, can make it easier to identify. However, if the ghost is one that specifically affects multiple light fixtures and other electronics at once, it's more likely to be a Jinn.Poltergeists throw items with higher force than other ghosts.\r\n      An unwritten quirk of the Poltergeist is that they have the greatest capacity to roam from their Ghost Room, going far to move objects away from its space. In larger maps, this can result in red herrings when looking for Ghost Activity and cause players to waste time searching areas that ultimately do not house the Poltergeist.`,\r\n    positiveTests: ['Poltergeist Test'],\r\n  },\r\n  {\r\n    name: 'Revenant',\r\n    description:\r\n      `Unlike other Ghosts, who will often have a specific target selected when starting a Hunt they will hone in on, Revenants can freely switch targets if there is another player that is closer by - and especially one that is in plain view and available, making its goal of killing players more convenient. \r\n      If you are not hiding during a hunt the only way to stay alive is to light a smudge stick while it is chasing you to make it wander somewhere else.`,\r\n    positiveTests: ['Revenant Test'],\r\n  },\r\n  {\r\n    name: 'Jinn',\r\n    description: `Jinns tend to interact with electronics more than any other ghost. They may cause phones to ring, radios to activate, TV's to turn on, or car alarms to go off more often. This also extends to light switches, which may cause unsure investigators to confuse a Jinn for a Mare or Poltergeist; although Mares also have the power to turn lights off, they will not often turn lights back on as Jinn do, and Poltergeists will likely disturb more general objects that aren't light switches such as doors.`,\r\n    positiveTests: ['Jinn Test'],\r\n  },\r\n  {\r\n    name: 'Spirit',\r\n    description:\r\n      'With no special powers, and a harsher reaction to Smudge Sticks, Spirits serve as a baseline to measure other Ghosts against. With their behavior ranging from shy to active, passive to hostile, a Spirit can have any number of perceived characteristics. It is this lack of defining traits that can confuse investigators; therefore, a Spirit can be easily mistaken for another entity.',\r\n    positiveTests: ['Spirit Test'],\r\n  },\r\n  {\r\n    name: 'Oni',\r\n    description: `The Oni is also described as being extremely strong, and it will throw objects around the room with great force when interacting with them. However, these objects are not dangerous to the hunters or their sanity unlike those thrown by Poltergeists.`,\r\n  },\r\n  {\r\n    name: 'Shade',\r\n    description: `Noted as being shy ghosts, Shades lower their activity in the presence of multiple investigators. Because of its temperament, it can be harder to find Ghost Activity when sticking together. However, like all ghosts in the game, the Shade is more likely to hunt when the players' Sanity is low.`,\r\n    positiveTests: ['Shade Test'],\r\n  },\r\n\r\n  // Freezing\r\n  {\r\n    name: 'Wraith',\r\n    description: 'Wraiths almost never touch the ground, but this does not apply to the ghost model. Because of this, footprint sounds from a wraith will be rare to non-existent, and they can travel directly through doors without having to open them.',\r\n    requiresFreezingTemp: true,\r\n    positiveTests: ['Wraith Test'],\r\n  },\r\n  {\r\n    name: 'Phantom',\r\n    description: 'Looking at a Phantom will considerably drop your Sanity. This refers to any visible manifestations of the Phantom, including during a Hunt.',\r\n    requiresFreezingTemp: true,\r\n    positiveTests: ['Phantom Test'],\r\n  },\r\n  {\r\n    name: 'Yurei',\r\n    description: `A Yurei will drain sanity at 0.4% per second during a manifestation, this is higher then the usual 0.2% per second from other ghosts.\r\n    The higher manifestation drain will also happen during a hunt if the player is within 10 meters of the ghost.`,\r\n    requiresFreezingTemp: true,\r\n    positiveTests: ['Yurei Test'],\r\n  },\r\n  {\r\n    name: 'Mare',\r\n    description: `Mares have a higher chance of initiating hunts when players are in darkness, especially if the lights are turned off in the ghost room. \r\n    It tends to turn lights and the fuse box off more than any other ghost type when active. An active Mare stalking low-sanity players have the capacity to \r\n    initiate hunts within mere moments of each other, allowing them to rival even Demons in aggression. Note that staying in the light does not prevent the \r\n    Mare from hunting; it will still be able to initiate Hunts provided it is not currently the Setup Phase, though it will be less aggressive in doing so \r\n    when compared to other ghost types.`,\r\n    requiresFreezingTemp: true,\r\n    positiveTests: ['Mare Test'],\r\n  },\r\n  {\r\n    name: 'Banshee',\r\n    description: `Unlike other ghosts, who will often change their selected target between Hunts, Banshees will always target the same player every time it hunts \r\n    until it successfully kills them. While this means other players are safe from the Banshee's power so long as its target is alive, it makes carrying out objectives \r\n    by the targeted player more difficult, though at the same time making it much easier for other players. Banshees fear the Crucifix, which boosts the Hunt-stopping \r\n    range of one from 3 meters to 5 meters against it.`,\r\n    requiresFreezingTemp: true,\r\n    positiveTests: ['Banshee Test'],\r\n  },\r\n  {\r\n    name: 'Demon',\r\n    description: `They are generally regarded as the most dangerous type of ghost to encounter; noted for being highly aggressive, it will attack more often than any other \r\n    ghost, and usually without warning. They are notorious for initiating hunts frequently, a trait that is exacerbated by lower sanity levels, and compounded by higher \r\n    difficulties like Professional where hunts last much longer. Taking all of these factors into account, Demons at their most aggressive will hunt in intervals as short \r\n    as half-minutes, forcing the players to spend more total time hiding than investigating.`,\r\n    requiresFreezingTemp: true,\r\n    positiveTests: ['Demon Test'],\r\n  },\r\n];\r\n","enum MAP_SIZES {\r\n  SMALL,\r\n  MEDIUM,\r\n  LARGE,\r\n}\r\n\r\nexport interface Map {\r\n  name: string;\r\n  size: MAP_SIZES;\r\n  setupDropRate?: number;\r\n  normalDropRate?: number;\r\n  soloSetupDropRate?: number;\r\n  soloNormalDropRate?: number;\r\n}\r\n\r\nexport const MAPS: Map[] = [\r\n  {\r\n    name: 'Tanglewood Street House',\r\n    size: MAP_SIZES.SMALL,\r\n  },\r\n  {\r\n    name: 'Edgefield Street House',\r\n    size: MAP_SIZES.SMALL,\r\n  },\r\n  {\r\n    name: 'Ridgeview Road House',\r\n    size: MAP_SIZES.SMALL,\r\n  },\r\n  {\r\n    name: 'Grafton Farmhouse',\r\n    size: MAP_SIZES.SMALL,\r\n  },\r\n  {\r\n    name: 'Bleasdale Farmhouse',\r\n    size: MAP_SIZES.SMALL,\r\n  },\r\n\r\n  {\r\n    name: 'Brownstone High School',\r\n    size: MAP_SIZES.MEDIUM,\r\n  },\r\n  {\r\n    name: 'Prison',\r\n    size: MAP_SIZES.MEDIUM,\r\n  },\r\n  {\r\n    name: 'Asylum',\r\n    size: MAP_SIZES.LARGE,\r\n  },\r\n].map((map: any) => {\r\n  switch (map.size) {\r\n    case MAP_SIZES.LARGE:\r\n      map.setupDropRate = 0.03;\r\n      map.normalDropRate = 0.05;\r\n      break;\r\n    case MAP_SIZES.MEDIUM:\r\n      map.setupDropRate = 0.05;\r\n      map.normalDropRate = 0.08;\r\n      break;\r\n    case MAP_SIZES.SMALL:\r\n      map.setupDropRate = 0.09;\r\n      map.normalDropRate = 0.12;\r\n      break;\r\n  }\r\n\r\n  map.soloSetupDropRate = map.setupDropRate / 2.0;\r\n  map.soloNormalDropRate = map.normalDropRate / 2.0;\r\n\r\n  return map;\r\n});\r\n","import { Component, OnInit } from '@angular/core';\nimport { TESTS } from '../data/tests.data';\nimport { GHOSTS } from '../data/ghosts.data';\n\n@Component({\n  selector: 'app-no-evidence-ghost-tester',\n  templateUrl: './no-evidence-ghost-tester.component.html',\n  styleUrls: ['./no-evidence-ghost-tester.component.scss'],\n})\nexport class NoEvidenceGhostTesterComponent implements OnInit {\n  freezingTemps?: boolean;\n  ghosts: any[];\n  tests: any[];\n  duplicateTestResults: boolean;\n\n  constructor() {\n    this.ghosts = GHOSTS.map((g) => ({ ...g }));\n    this.tests = TESTS.map((t) => ({ ...t }));\n    this.duplicateTestResults = false;\n  }\n\n  ngOnInit(): void {}\n\n  confirmFreezingTemp(confirm?: boolean): void {\n    this.freezingTemps = confirm;\n\n    if (confirm === undefined) {\n      this.ghosts = GHOSTS.map((g) => ({ ...g }));\n      return;\n    }\n\n    this.resetEverything(this.freezingTemps);\n  }\n\n  confirmPass(testName: string, passed?: boolean): void {\n    console.log('testing');\n    this.tests = this.tests.map((test) => {\n      if (test.name === testName) {\n        test.passed = passed;\n      }\n\n      return test;\n    });\n\n    // if this was a pass, then the one we did is the right one\n    if (passed) {\n      this.ghosts = [\n        GHOSTS.find(\n          (ghost) =>\n            ghost.name ===\n            this.tests.find((test) => test.name === testName).positiveTestFor\n        ),\n      ];\n    } else {\n      this.ghosts = this.applyTestResults(\n        this.applyFreezeFilterToGhosts(GHOSTS)\n      );\n    }\n\n    // See if we have multiple\n    const numberOfPasses = this.tests.filter((test) => test.passed).length;\n    if (numberOfPasses > 1) {\n      this.duplicateTestResults = true;\n    } else {\n      this.duplicateTestResults = false;\n    }\n  }\n\n  applyFreezeFilterToGhosts(ghosts: any[]): any[] {\n    return ghosts.filter(\n      (ghost: any) => !!this.freezingTemps === !!ghost.requiresFreezingTemp\n    );\n  }\n\n  applyFreezeFilterToTests(tests: any[]): any[] {\n    return tests.filter(\n      (test: any) => !!this.freezingTemps === !!test.freezingTempTest\n    );\n  }\n\n  applyTestResults(ghosts: any[]): any[] {\n    return ghosts.filter((ghost: any) => {\n      // if there is no test we can perform, then return the ghost because we can't eliminate it\n      if (!ghost.positiveTests || !ghost.positiveTests.length) {\n        return ghost;\n      }\n\n      // if there are tests, make sure every test hasn't been failed (false)\n      // (should be true for passed or undefined for unknown)\n      return ghost.positiveTests.every(\n        (testName: string) =>\n          this.tests.find((test) => test.name === testName).passed !== false\n      );\n    });\n  }\n\n  resetEverything(freezingTemps?: boolean): void {\n    this.duplicateTestResults = false;\n\n    this.freezingTemps = freezingTemps;\n    this.ghosts = this.applyFreezeFilterToGhosts(GHOSTS.map((g) => ({ ...g })));\n    this.tests = this.applyFreezeFilterToTests(TESTS.map((t) => ({ ...t })));\n\n    console.log('reset');\n  }\n}\n","<div class=\"card\">\n  <div class=\"freezing-temps\">\n    <div class=\"card-body\">\n      <h5 class=\"card-title\">Freezing Temps</h5>\n      <p class=\"card-text\">\n        There are 6 ghosts that show Freezing Temps and 6 ghosts that do not\n        show Freezing Temps. On a No Evidence run, this can be accomplished by\n        seeing or not seeing your breath in the ghost's room.\n      </p>\n      <button\n        class=\"btn\"\n        [ngClass]=\"{\n          'btn-primary': this.freezingTemps === true,\n          'btn-secondary': this.freezingTemps !== true\n        }\"\n        (click)=\"this.confirmFreezingTemp(true)\"\n      >\n        Yes\n      </button>\n\n      <button\n        class=\"btn\"\n        [ngClass]=\"{\n          'btn-primary': this.freezingTemps === false,\n          'btn-secondary': this.freezingTemps !== false\n        }\"\n        (click)=\"this.confirmFreezingTemp(false)\"\n      >\n        No\n      </button>\n\n      <button\n        class=\"btn\"\n        [ngClass]=\"{\n          'btn-primary': this.freezingTemps === undefined,\n          'btn-secondary': this.freezingTemps !== undefined\n        }\"\n        (click)=\"this.confirmFreezingTemp()\"\n      >\n        Unknown\n      </button>\n      <span class=\"reset-warning\" *ngIf=\"this.freezingTemps !== undefined\"\n        >Warning: Changing the selection here will reset the Test selections\n        below</span\n      >\n    </div>\n  </div>\n</div>\n\n<div class=\"card mt-2\" *ngIf=\"this.freezingTemps === undefined; else testBlock\">\n  <div class=\"card-body\">\n    In order to display tests you must first determine if there are freezing\n    temps in the ghost rooms.\n  </div>\n</div>\n\n<ng-template #testBlock>\n  <div class=\"card test mt-2\" *ngFor=\"let test of tests\">\n    <div class=\"card-body\" *ngIf=\"test\">\n      <h5 class=\"card-title\">{{ test.name }}</h5>\n      <p class=\"card-text\">\n        {{ test.description }}\n      </p>\n      <button\n        class=\"btn\"\n        [ngClass]=\"{\n          'btn-primary': test.passed === true,\n          'btn-secondary': test.passed !== true\n        }\"\n        (click)=\"this.confirmPass(test.name, true)\"\n      >\n        Pass\n      </button>\n\n      <button\n        class=\"btn\"\n        [ngClass]=\"{\n          'btn-primary': test.passed === false,\n          'btn-secondary': test.passed !== false\n        }\"\n        (click)=\"this.confirmPass(test.name, false)\"\n      >\n        Fail\n      </button>\n\n      <button\n        class=\"btn\"\n        [ngClass]=\"{\n          'btn-primary': test.passed === undefined,\n          'btn-secondary': test.passed !== undefined\n        }\"\n        (click)=\"this.confirmPass(test.name)\"\n      >\n        Untested\n      </button>\n    </div>\n  </div>\n</ng-template>\n\n<div class=\"card possible-ghosts mt-2\" *ngIf=\"!duplicateTestResults\">\n  <div class=\"card-body\">\n    <h5 class=\"card-title\">Possible Ghosts</h5>\n    <span class=\"card-text\">\n      <ul class=\"list-group list-group-flush\" *ngIf=\"this.ghosts?.length\">\n        <li class=\"list-group-item\" *ngFor=\"let ghost of this.ghosts\">\n          <div class=\"d-flex w-100 justify-content-between\">\n            <h5 class=\"mb-1\">{{ ghost.name }}</h5>\n            <small *ngIf=\"ghost.positiveTests?.length\">Testable</small>\n          </div>\n          <p class=\"mb-1\">\n            {{ ghost.description }}\n          </p>\n          <small *ngIf=\"ghost.requiresFreezingTemp\">Freezing Temps</small>\n          <small *ngIf=\"!ghost.requiresFreezingTemp\">No Freezing Temps</small>\n        </li>\n      </ul>\n    </span>\n  </div>\n</div>\n\n<div\n  class=\"alert alert-danger d-flex flex-column mt-2\"\n  role=\"alert\"\n  *ngIf=\"duplicateTestResults\"\n>\n  <span>You have more then 1 passed test, that is not possible!</span>\n  <button class=\"btn btn-danger\" (click)=\"this.resetEverything()\">\n    Click here to reset everything and try again.\n  </button>\n</div>\n","import { Component, OnDestroy, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-stopwatch',\n  templateUrl: './stopwatch.component.html',\n  styleUrls: ['./stopwatch.component.scss'],\n})\nexport class StopwatchComponent implements OnInit, OnDestroy {\n  running: boolean;\n  counter: number;\n  timerRef: any;\n  lapTimes: number[];\n  lapDelta: number;\n\n  constructor() {\n    this.running = false;\n    this.counter = 0;\n    this.lapTimes = [];\n    this.lapDelta = 0;\n  }\n\n  ngOnInit(): void {}\n\n  startResumeTimer() {\n    this.running = !this.running;\n    //IF the counter is running startTime will be the number that the timer\n    //starts with when you pause and resume, this.counter is the current time\n    //that is displayed on the web browser\n    if (this.running) {\n      const startTime = Date.now() - (this.counter || 0);\n      clearInterval(this.timerRef);\n      this.timerRef = setInterval(() => {\n        this.counter = Date.now() - startTime;\n      });\n    } else {\n      clearInterval(this.timerRef);\n    }\n  }\n\n  lapTime() {\n    this.lapTimes.unshift(this.counter);\n    if (this.lapTimes.length < 2) {\n      this.lapDelta = 0;\n      return;\n    }\n\n    this.lapDelta = this.lapTimes[0] - this.lapTimes[1];\n  }\n\n  clearTime() {\n    this.running = false;\n    this.counter = 0;\n    this.lapTimes = [];\n    this.lapDelta = 0;\n    clearInterval(this.timerRef);\n  }\n\n  ngOnDestroy() {\n    clearInterval(this.timerRef);\n  }\n}\n","<h5 class=\"d-flex justify-content-center\">Timer</h5>\n<section class=\"stopwatch-label d-flex justify-content-center\">\n  <div id=\"counterSize\">{{ counter | msToSec }}</div>\n</section>\n<section class=\"timer-btn-container d-flex flex-row justify-content-center row\">\n  <button\n    class=\"btn timer-btn d-flex justify-content-center col-md-6\"\n    [ngClass]=\"{\n      'btn-danger': this.running,\n      'btn-success': !this.running\n    }\"\n    (click)=\"startResumeTimer()\"\n  >\n    {{ this.running ? \"Stop\" : \"Start\" }}\n  </button>\n  <button\n    class=\"btn timer-btn btn-secondary d-flex justify-content-center col-md-6\"\n    (click)=\"this.running ? this.lapTime() : this.clearTime()\"\n  >\n    {{ this.running ? \"Lap\" : \"Clear\" }}\n  </button>\n</section>\n<section class=\"laptimes d-flex justify-content-center flex-column\">\n  <span *ngIf=\"this.lapDelta\"> Delta: {{ lapDelta | msToSec }} </span>\n  <span *ngFor=\"let lap of this.lapTimes | slice: 0:5\">\n    {{ lap | msToSec }}\n  </span>\n  <span *ngIf=\"this.lapTimes.length === 6\" class=\"font-italic\">\n    (1 time is hidden)\n  </span>\n  <span *ngIf=\"this.lapTimes.length > 6\" class=\"font-italic\">\n    ({{ this.lapTimes.length - 5 }} times are hidden)\n  </span>\n</section>\n","import { Component } from '@angular/core';\r\n\r\nimport { SanityService } from './sanity-tester/sanity.service';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styles: [''],\r\n})\r\nexport class AppComponent {\r\n  constructor() {}\r\n}\r\n","<app-nav-bar></app-nav-bar>\r\n<div class=\"container\">\r\n  <app-sanity-tester class=\"mt-4\"></app-sanity-tester>\r\n\r\n  <app-no-evidence-ghost-tester class=\"mt-4\"></app-no-evidence-ghost-tester>\r\n\r\n  <!-- <app-footer></app-footer> -->\r\n</div>\r\n","export interface Difficulty {\r\n  name: string;\r\n  dropRate: number;\r\n}\r\n\r\nexport const DIFFICULTIES: Difficulty[] = [\r\n  {\r\n    name: 'Amateur',\r\n    dropRate: 1.0,\r\n  },\r\n  {\r\n    name: 'Intermediate',\r\n    dropRate: 1.5,\r\n  },\r\n  {\r\n    name: 'Professional',\r\n    dropRate: 2.0,\r\n  },\r\n];\r\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { NavBarComponent } from './nav-bar/nav-bar.component';\r\nimport { FooterComponent } from './footer.component';\r\nimport { TimeChangePipe } from './time-change.pipe';\r\nimport { SanityTesterComponent } from './sanity-tester/sanity-tester.component';\r\nimport { StopwatchComponent } from './stopwatch/stopwatch.component';\nimport { NoEvidenceGhostTesterComponent } from './no-evidence-ghost-tester/no-evidence-ghost-tester.component';\nimport { ServiceWorkerModule } from '@angular/service-worker';\nimport { environment } from '../environments/environment';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    NavBarComponent,\r\n    FooterComponent,\r\n    TimeChangePipe,\r\n    SanityTesterComponent,\r\n    StopwatchComponent,\r\n    NoEvidenceGhostTesterComponent,\r\n  ],\r\n  imports: [BrowserModule, AppRoutingModule, ReactiveFormsModule, ServiceWorkerModule.register('ngsw-worker.js', {\n  enabled: environment.production,\n  // Register the ServiceWorker as soon as the app is stable\n  // or after 30 seconds (whichever comes first).\n  registrationStrategy: 'registerWhenStable:30000'\n})],\r\n  providers: [],\r\n  bootstrap: [AppComponent],\r\n})\r\nexport class AppModule {}\r\n","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-footer',\r\n  template: `\r\n    <nav class=\"navbar fixed-bottom navbar-light bg-light\">\r\n      <div class=\"container-fluid\">\r\n        <a class=\"navbar-brand\">\r\n          Calculations assume you have vsync on at 60fps.\r\n        </a>\r\n      </div>\r\n    </nav>\r\n  `,\r\n  styles: [``],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class FooterComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n}\r\n","export const TESTS = [\r\n  // Non-Freezing\r\n  {\r\n    name: 'Poltergeist Test',\r\n    description:\r\n      'When items are thrown in front of player, that players sainty drops 2 times the amount of items thrown percent.',\r\n    positiveTestFor: 'Poltergeist',\r\n  },\r\n\r\n  {\r\n    name: 'Revenant Test',\r\n    description: `During a Hunt, the Revenant can move twice as fast the default speed when it is chasing a player, but it will move 1.5x slower when it isn't.`,\r\n    positiveTestFor: 'Revenant',\r\n  },\r\n\r\n  {\r\n    name: 'Jinn Test',\r\n    description: `During a hunt the Jinn can move twice as fast the default speed when it is chasing a player until it is within 3 meters of the player and then it will drop back to regular hunting speed.`,\r\n    positiveTestFor: 'Jinn',\r\n  },\r\n\r\n  {\r\n    name: 'Spirit Test',\r\n    description: `Using Smudge Sticks on a Spirit will stop it attacking for 180 seconds instead of 90`,\r\n    positiveTestFor: 'Spirit',\r\n  },\r\n\r\n  {\r\n    name: 'Shade Test',\r\n    description:\r\n      'Most activity will only happen when there is only one player in the ghost room. If there are two or more people in the ghost room, it will not initiate a Hunt.',\r\n    positiveTestFor: 'Shade',\r\n  },\r\n\r\n  // Freezing\r\n\r\n  {\r\n    name: 'Wraith Test',\r\n    description: `When it disturbes a salt pile (there is an impression on the salt), it does not leave any footprints behind (there is no green footprint visible in black light). To be sure, check for footprints in 3 or more salt piles to determine if it's a Wraith.`,\r\n    positiveTestFor: 'Wraith',\r\n    freezingTempTest: true,\r\n  },\r\n\r\n  {\r\n    name: 'Phantom Test',\r\n    description: `Taking a photo of the Phantom will make it disappear.`,\r\n    positiveTestFor: 'Phantom',\r\n    freezingTempTest: true,\r\n  },\r\n\r\n  {\r\n    name: 'Yurei Test',\r\n    description: `Using Smudge Sticks on the Yurei will cause it to not wander around the location for 90 seconds.`,\r\n    positiveTestFor: 'Yurei',\r\n    freezingTempTest: true,\r\n  },\r\n\r\n  {\r\n    name: 'Mare Test',\r\n    description: `If it switchs lights off and never switches lights on, it is likely to be a Mare.`,\r\n    positiveTestFor: 'Mare',\r\n    freezingTempTest: true,\r\n  },\r\n\r\n  {\r\n    name: 'Banshee Test',\r\n    description: `If it hunts when the player(s) have more than 65% sanity, it's a Banshee.`,\r\n    positiveTestFor: 'Banshee',\r\n    freezingTempTest: true,\r\n  },\r\n\r\n  {\r\n    name: 'Demon Test',\r\n    description: `Sanity does not Drop when a question was asked successfully on a Ouiji Board.\r\n    Or if there is no Ouiji Board on the map if a hunt starts and the player(s) sanity is between 50% - 65%,\r\n    it's a Demon.`,\r\n    positiveTestFor: 'Demon',\r\n    freezingTempTest: true,\r\n  },\r\n];\r\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Subscription, timer } from 'rxjs';\nimport { DIFFICULTIES, Difficulty } from '../data/difficulties.data';\nimport { Map, MAPS } from '../data/maps.data';\n\nexport interface SanityRange {\n  low: number;\n  high: number;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SanityService {\n  /**\n   * Goals:\n   *\n   * Need to know:\n   * - What type of map\n   * - Single vs Multiplayer\n   *\n   * * Be as accurate as it can be with sanity so you dont need to go back to the truck\n   * * Only to see what type of ghost it'll be\n   *\n   *\n   * * For example: Sanity is @ 90%, you go into the dark room and we calc the sanity\n   *  --- Normal Sanity\n   *  --- Mare Sanity\n   *  --- Yurei Sanity\n   *  --- Demon Sanity\n   * * We track what it normally would be vs what it is on a specifc type of ghost\n   *\n   * * Special Sanity Drops\n   * --- Fail Ouija -40\n   * --- Success Ouija\n   * --- --- Demon: stays as is\n   * --- ---- Rest:\n   *\n   * * You log the time with timer, when you're done with the \"timer\" you hit the lap button and ...\n   *\n   * * Go back to Truck and check what sanity is\n   *\n   * Gaining Sanity\n   * -- Took pill button\n   *\n   * Add in \"Low Sanity\", user can input\n   *\n   * TWO TYPES of SANITY DRAIN\n   *\n   * * Passive Sanity Drain\n   * -- Check state of \"IN DARKNESS\" toggle; if on passive; if off no passive\n   *\n   * * Active Ghost Evidence\n   *  --- Start timer ; LAP\n   *\n   * * Need to take in what map\n   * * Need to take in what the difficulty is\n   */\n  sanity$: BehaviorSubject<SanityRange>;\n  inDarkness$: BehaviorSubject<boolean>;\n  lowSanityDelta: number = -2;\n  highSanityDelta: number = 3;\n  map: Map;\n  difficulty: Difficulty;\n  subscriptions: Subscription[];\n  timing: Subscription | undefined;\n\n  constructor() {\n    this.sanity$ = new BehaviorSubject<SanityRange>({ low: 0, high: 0 });\n    this.nextSanity(100);\n\n    this.inDarkness$ = new BehaviorSubject<boolean>(false);\n    this.map = MAPS[0];\n    this.difficulty = DIFFICULTIES[0];\n\n    this.subscriptions = [];\n    this.subscriptions.push(\n      this.inDarkness$.subscribe((inDarkness) => {\n        if (!inDarkness) {\n          return this.stopTimer();\n        }\n\n        this.timing = timer(0, 1000).subscribe((_) =>\n          this.nextSanity(\n            this.sanity$.value.low -\n              this.lowSanityDelta -\n              (this.map.normalDropRate || 0)\n          )\n        );\n      })\n    );\n  }\n\n  private stopTimer() {\n    this.timing?.unsubscribe();\n  }\n\n  setMap(map: Map) {\n    this.map = map;\n  }\n\n  setDifficulty(difficulty: Difficulty) {\n    this.difficulty = difficulty;\n  }\n\n  resetSanity(sanity: number): void {\n    sanity = sanity - this.lowSanityDelta;\n    this.nextSanity(sanity);\n  }\n\n  setDarkness(value: boolean): void {\n    this.inDarkness$.next(value);\n  }\n\n  private nextSanity(sanity: number): void {\n    this.sanity$ = new BehaviorSubject<SanityRange>({\n      low: this.getLowSanity(sanity),\n      high: this.getHighSanity(sanity),\n    });\n  }\n\n  getLowSanity(sanity: number): number {\n    const lowSanity = sanity + this.lowSanityDelta;\n    if (lowSanity < 0) return 0;\n    return lowSanity;\n  }\n\n  getHighSanity(sanity: number): number {\n    const highSanity = sanity + this.highSanityDelta;\n    if (highSanity > 100) return 100;\n    return highSanity;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { SanityService } from './sanity.service';\nimport { Map, MAPS } from '../data/maps.data';\nimport { DIFFICULTIES, Difficulty } from '../data/difficulties.data';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-sanity-tester',\n  templateUrl: './sanity-tester.component.html',\n  styleUrls: ['./sanity-tester.component.scss'],\n})\nexport class SanityTesterComponent implements OnInit {\n  resetValue: FormControl;\n  maps: Map[];\n  map: Map;\n  difficulties: Difficulty[];\n  difficulty: Difficulty;\n  inDarkness: FormControl;\n  subscriptions: Subscription[];\n\n  constructor(public sanityService: SanityService) {\n    this.resetValue = new FormControl();\n\n    this.maps = MAPS;\n    this.map = this.maps[0];\n\n    this.difficulties = DIFFICULTIES;\n    this.difficulty = this.difficulties[0];\n\n    this.inDarkness = new FormControl();\n\n    this.subscriptions = [];\n    this.subscriptions.push(\n      this.inDarkness.valueChanges.subscribe((value) => {\n        this.sanityService.setDarkness(value);\n      })\n    );\n  }\n\n  selectMap(map: Map): void {\n    this.map = map;\n    this.sanityService.setMap(this.map);\n  }\n\n  selectDifficulty(difficulty: Difficulty): void {\n    this.difficulty = difficulty;\n    this.sanityService.setDifficulty(this.difficulty);\n  }\n\n  ngOnInit(): void {}\n\n  resetSanity() {\n    this.sanityService.resetSanity(this.resetValue.value);\n  }\n\n  ngOnDestroy() {\n    this.subscriptions.forEach((sub) => sub.unsubscribe());\n  }\n}\n","<div class=\"accordion\">\n  <div class=\"accordion-item\">\n    <h2 class=\"accordion-header\" id=\"headingOne\">\n      <button\n        class=\"accordion-button\"\n        type=\"button\"\n        data-bs-toggle=\"collapse\"\n        data-bs-target=\"#collapseSanityTest\"\n        aria-expanded=\"true\"\n        aria-controls=\"collapseSanityTest\"\n      >\n        Sanity Tester (beta)\n      </button>\n    </h2>\n    <div\n      id=\"collapseSanityTest\"\n      class=\"accordion-collapse collapse show\"\n      aria-labelledby=\"headingOne\"\n      data-bs-parent=\"#accordionExample\"\n    >\n      <div class=\"accordion-body\">\n        <h6 class=\"card-subtitle mb-2 text-muted\">\n          Tracks the standard amount of sanity you should lose for that specific\n          Map and Difficutly. If you witness ghost activities and your final\n          truck sanity is under this range, this is an indicator that you are\n          looking at a Phantom or Yurei.\n        </h6>\n\n        <div class=\"d-flex row\">\n          <div class=\"col-md-10\">\n            <div class=\"d-flex flex-column\">\n              <div>\n                <input\n                  class=\"form-check-input\"\n                  type=\"checkbox\"\n                  id=\"inDarknessCheckbox\"\n                  [formControl]=\"inDarkness\"\n                  checked\n                />\n\n                <label class=\"form-check-label px-2\" for=\"inDarknessCheckbox\">\n                  In Darkness\n                </label>\n                <span class=\"font-italic px-4\">\n                  (Sanity will count down while you are in darkness)\n                </span>\n              </div>\n              <div class=\"sanity-block d-flex flex-column my-4\">\n                <div class=\"\">\n                  <h5 class=\"card-title\">Sanity Range</h5>\n                  <div\n                    *ngIf=\"this.sanityService.sanity$ | async as sanity\"\n                    class=\"d-flex flex-row\"\n                  >\n                    <h3 class=\"\">{{ sanity.high | number: \"0.0-1\" }}</h3>\n                    <h3>-</h3>\n                    <h3>{{ sanity.low | number: \"0.0-1\" }}</h3>\n                  </div>\n                </div>\n                <div class=\"\">\n                  <h5 class=\"card-title\">Reset Sanity</h5>\n                  <div class=\"d-flex flex-row\">\n                    <input\n                      type=\"number\"\n                      class=\"\"\n                      id=\"resetSanityTextBox\"\n                      [formControl]=\"resetValue\"\n                      placeholder=\"Lowest sanity in range\"\n                    />\n                    <button class=\"btn btn-primary\" (click)=\"resetSanity()\">\n                      Reset\n                    </button>\n                  </div>\n                </div>\n              </div>\n              <div class=\"mt-4 d-flex\">\n                <div class=\"map\">\n                  <h5 class=\"card-title\">Map</h5>\n                  <div class=\"dropdown\">\n                    <button\n                      class=\"btn btn-secondary dropdown-toggle\"\n                      type=\"button\"\n                      id=\"dropdownMenuButton\"\n                      data-bs-toggle=\"dropdown\"\n                      aria-expanded=\"false\"\n                    >\n                      {{ this.map.name }}\n                    </button>\n                    <ul\n                      class=\"dropdown-menu\"\n                      aria-labelledby=\"dropdownMenuButton\"\n                    >\n                      <li>\n                        <a\n                          class=\"dropdown-item\"\n                          (click)=\"selectMap(map)\"\n                          *ngFor=\"let map of this.maps\"\n                        >\n                          {{ map.name }}\n                        </a>\n                      </li>\n                    </ul>\n                  </div>\n                </div>\n                <div class=\"diff mx-4\">\n                  <h5 class=\"card-title\">Difficulty</h5>\n                  <div class=\"dropdown\">\n                    <button\n                      class=\"btn btn-secondary dropdown-toggle\"\n                      type=\"button\"\n                      id=\"dropdownMenuButton\"\n                      data-bs-toggle=\"dropdown\"\n                      aria-expanded=\"false\"\n                    >\n                      {{ this.difficulty.name }}\n                    </button>\n                    <ul\n                      class=\"dropdown-menu\"\n                      aria-labelledby=\"dropdownMenuButton\"\n                    >\n                      <li>\n                        <a\n                          class=\"dropdown-item\"\n                          (click)=\"selectDifficulty(difficulty)\"\n                          *ngFor=\"let difficulty of this.difficulties\"\n                        >\n                          {{ difficulty.name }}\n                        </a>\n                      </li>\n                    </ul>\n                  </div>\n                </div>\n              </div>\n              <div class=\"mt-4 d-flex flex-row\"></div>\n            </div>\n          </div>\n          <div class=\"col-md-2\">\n            <app-stopwatch></app-stopwatch>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nconst routes: Routes = [];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}